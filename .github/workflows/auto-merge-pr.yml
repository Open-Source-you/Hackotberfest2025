name: Auto Merge Pull Requests

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  statuses: write
  checks: write

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install PyGithub requests

    - name: Auto Merge PR
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        REPO_NAME: ${{ github.repository }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
      run: |
        python .github/scripts/auto_merge_bot.py

    - name: Check PR Status
      id: pr-status
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Check if PR is ready to merge
        PR_STATE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" \
          | jq -r '.mergeable_state')
        
        echo "PR State: $PR_STATE"
        echo "state=$PR_STATE" >> $GITHUB_OUTPUT

    - name: Auto Merge (if conditions met)
      if: steps.pr-status.outputs.state == 'clean' && github.event.pull_request.auto_merge == null
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üöÄ Auto-merging PR #${{ github.event.pull_request.number }}"
        
        # Enable auto-merge
        curl -X PUT \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/merge" \
          -d '{
            "commit_title": "Auto-merge: ${{ github.event.pull_request.title }}",
            "commit_message": "Automatically merged via GitHub Actions",
            "merge_method": "squash"
          }' || echo "‚ùå Auto-merge failed"

    - name: Add Auto-merge Label
      if: steps.pr-status.outputs.state == 'clean'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        curl -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels" \
          -d '{"labels":["auto-merge", "bot-approved"]}' || echo "‚ö†Ô∏è Could not add labels"

    - name: Comment on PR
      if: always()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ "${{ steps.pr-status.outputs.state }}" = "clean" ]; then
          COMMENT="ü§ñ **Auto-merge Bot**: This PR has been automatically approved and queued for merging!"
        else
          COMMENT="ü§ñ **Auto-merge Bot**: This PR needs attention before it can be auto-merged. Current status: ${{ steps.pr-status.outputs.state }}"
        fi
        
        curl -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments" \
          -d "{\"body\":\"$COMMENT\"}" || echo "‚ö†Ô∏è Could not add comment"